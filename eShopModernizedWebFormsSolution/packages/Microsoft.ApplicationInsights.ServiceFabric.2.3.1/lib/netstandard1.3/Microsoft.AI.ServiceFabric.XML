<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AI.ServiceFabric</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ApplicationInsights.ServiceFabric.CallContext">
            <summary>
            .Net core does not have a CallContext implementation. So we are wrapping async local and providing an alternative implementation.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.ServiceFabric.CallContext.LogicalSetData(System.String,System.Object)">
            <summary>
            Stores the given object as an async local object in our collection.
            </summary>
            <param name="name">The call context name.</param>
            <param name="data">The object to store.</param>
        </member>
        <member name="M:Microsoft.ApplicationInsights.ServiceFabric.CallContext.LogicalGetData(System.String)">
            <summary>
            Retrieves the object stored against the given name.
            </summary>
            <param name="name">The name against which item was stored.</param>
            <returns>The object retrieved.</returns>
        </member>
        <member name="T:Microsoft.ApplicationInsights.ServiceFabric.FabricTelemetryInitializer">
            <summary>
            Telemetry initializer for service fabric. Adds service fabric specific context to outgoing telemetry.
            </summary>
        </member>
        <member name="P:Microsoft.ApplicationInsights.ServiceFabric.FabricTelemetryInitializer.ApplicableServiceContext">
            <summary>
            There are a few ways the context could be provided. This property makes it easy for the rest of the implemenatation to ignore all those cases. 
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.ServiceFabric.FabricTelemetryInitializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ApplicationInsights.ServiceFabric.FabricTelemetryInitializer"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.ServiceFabric.FabricTelemetryInitializer.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ApplicationInsights.ServiceFabric.FabricTelemetryInitializer"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.ServiceFabric.FabricTelemetryInitializer.Initialize(Microsoft.ApplicationInsights.Channel.ITelemetry)">
            <summary>
            Adds service fabric context fields on the given telemetry object.
            </summary>
            <param name="telemetry">The telemetry item being sent through the AI sdk.</param>
        </member>
        <member name="M:Microsoft.ApplicationInsights.ServiceFabric.FabricTelemetryInitializer.AddPropertyFromEnvironmentVariable(System.String,System.String,Microsoft.ApplicationInsights.Channel.ITelemetry)">
            <summary>
            Adds the property to the telemetry context, if it doesn't already exist, using the environment variable value. It's a no-op
            if the property with the <paramref name="contextFieldName"/> already exist in the telemetry context.
            </summary>
            <param name="contextFieldName">The name of context field property, as used by Service Fabric. This will be same name used in the telemetry context property dictionary</param>
            <param name="environmentVariableName">The name of the environment variable having the equivalent value</param>
            <param name="telemetry">The telemetry object whose property dictionary will be updated</param>
        </member>
    </members>
</doc>
